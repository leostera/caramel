@module("erlang")
external display : string -> unit = "display"

module CLI = {
  @derive(Debug, Default)
  @clipper(
    name = "Test CLI",
    desc = "A sample test cli"
  )
  type t =
    | Print {
        @clipper(name = "MESSAGE")
        message: string,
      }

    | @clipper(name = "file")
      Print_file {
        @clipper(name = "PRINT_FILE", parser = Clipper.Parser.file)
        file: OS.Path.t
      }
}

/// This function will
run : t -> result<(), _>

run({:print, message}) -> display(`message: ${message}`)

run({:print_file, file}) -> {
  let contents = OS.File.read_to_string(file)?;
  display(`contents: ${contents}`)
}

run(cli) {
  switch cli {
  | { :print, message }  => display(`message: ${message}`)
  | { :print_file, file } =>
      let contents = OS.File.read_to_string(file)?;
      display(`contents: ${contents}`)
  }
}

// this is a regular comment
pub main(args) {
  let args = CLI.from_args(args)?;
  run(cli)?;
  Ok ()
}
